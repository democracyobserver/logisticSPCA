#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-matrix(rnorm(1000*20),ncol=20)
y<-10+svd(x[1:30,])$v[,1]+ .1*rnorm(20)
y
x
x<-matrix(rnorm(1000*20),ncol=20)
y<-10+svd(x[1:30,])$v[,1]+ .1*rnorm(20)
m=spca.fit(x,y,alpha=0.1)
m=spca.fit(x,y,alpha=0.1)
y
y<-svd(x[1:30,])$v[,1]+ .1*rnorm(20)
y
svd(x[1:30,])
g=svd(x[1:30,])
dim(x)
dim(g)
g
names()
names(g)
dim(g$v)
x
sum(x)
sum(x,)
sum(x,1)
sum(x,2)
?sum
colSums(x)
x<-matrix(rnorm(1000*20),ncol=20)
y<-colSums(x)
y[y>0]=1
y[y<=0]=0
y
m=spca.fit(x,y,alpha=0.1)
m=spca.fit(x,y,alpha=0.1)
i
m=spca.fit(x,y,alpha=0.1)
family
i
debugSource('~/logisticSPCA/R/supervised_pca.R')
debugSource('~/logisticSPCA/R/supervised_pca.R')
source('~/logisticSPCA/R/supervised_pca.R')
#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-matrix(rnorm(1000*20),ncol=20)
y<-colSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-matrix(rnorm(1000*20),ncol=20)
y<-colSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
debugSource('~/logisticSPCA/dummy.R')
m=spca.fit(x,y,alpha=0.1)
m=spca.fit(x,y,alpha=0.1)
debugSource('~/logisticSPCA/dummy.R')
debugSource('~/logisticSPCA/dummy.R')
i
input[[i]]
glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]])))
matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2)
target
input
input
input[[i]]
data.frame(input)[[i]]
#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
#the input should be a data.frame and the target a vector
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-colSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
#the input should be a data.frame and the target a vector
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-colSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
debugSource('~/logisticSPCA/dummy.R')
glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2)
input
debugSource('~/logisticSPCA/dummy.R')
input
as.numeric(as.vector(input[[i]]))
(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2)
)
dim(input)
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-rowSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
#this function computes the pca_matrix for a given alpha parameter
spca.computePCA<-function(input){
pca_matrix<-prcomp(as.matrix(input))
return(pca_matrix)
}
#this function returns a the indices of the columns to be kept
#the input should be a data.frame and the target a vector
spca.selectInputs<-function(input,target,alpha,family=binomial()){
num_col<-ncol(input)
keep<-logical(num_col)
#select the variables
for (i in 1:num_col){
m1<-glm.fit(matrix(c(rep(1,length(input[[i]])),as.numeric(as.vector(input[[i]]))),ncol=2),
as.vector(target),family=family)
#first coef is always intercept
if(abs(coef(m1)[2])>alpha){
keep[i]=TRUE
}
else{
keep[i]=FALSE
}
}
return(keep)
}
#runs glm supervised PCA and returns the predictions
#if components is not provided, then it calculates the components on the input data
#PCA_matrix can be computed by the function spca.computePCA
spca.predict<-function(model,input,num_components){
if(is.null(pca_matrix)){
pca_matrix<-spca.computePCA(input,target,alpha,family)
}
input<-data.frame(predict(pca_matrix,data))
if(num_components<ncol(inputs)){
inputs=inputs[,1:num_components]
}
res<-predict(model,input,type="response")
return(res)
}
#conducts logistic supervised PCA and returns the model
spca.fit<-function(input,target,alpha,family=binomial()){
keep=spca.selectInputs(input,target,alpha,family)
input=input[,keep]
input=apply(input,2,function(x) as.numeric(x))
pca_matrix<-spca.computePCA(input)
input=predict(pca_matrix,input)
m1<-glm.fit(input,target,family=family)
class(m1)=append(class(m1),"spca")
m1$pca_matrix=pca_matrix
m1$keep_columns_index=keep
return(m1)
}
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-rowSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
m
summary(m)
names(m)
glm.summary(m)
summary.glm(m)
?summary
spca.summary<-function(model){
return(summary.glm(model))
}
summary()
summary(m)
spca.summary(m)
summary.spca<-function(model){
return(summary.glm(model))
}
summary(m)
library(logisticSPCA)
library(logisticSPCA)
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-rowSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
m
names(m)
m$pca_matrix
x<-data.frame(matrix(rnorm(1000*20),ncol=20))
y<-rowSums(x)
y[y>0]=1
y[y<=0]=0
m=spca.fit(x,y,alpha=0.1)
summary(m)
#get the PCA object from the analysis
m$pca_matrix
